# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create and publish a Docker image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC **not production ready**

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          build-args: THREAGILE_VERSION=${{ steps.get_version.outputs.VERSION }} 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Sign image with a key
        run: |
          echo "${{secrets.COSIGN_PRIVATE_KEY}}" > /tmp/my_cosign.key && \
          cosign sign --key /tmp/my_cosign.key ${TAGS}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          image: ghcr.io/otyg/threagile:${{ steps.get_version.outputs.VERSION }}
          artifact-name: sbom.xml
          format: cyclonedx
        run: |
          cosign attach sbom --sbom ${{env.ANCHORE_SBOM_ACTION_PRIOR_ARTIFACT}} --type cyclonedx ${{ env.TAGS }}
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAGS: ghcr.io/otyg/threagile:${{ steps.get_version.outputs.VERSION }}
          COSIGN_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}