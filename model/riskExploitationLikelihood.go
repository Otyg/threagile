package model

import (
	"encoding/json"
	"errors"
	"strings"

	"github.com/otyg/threagile/model/core"
)

type RiskExploitationLikelihood int

const (
	Unlikely RiskExploitationLikelihood = iota
	Likely
	VeryLikely
	Frequent
)

func RiskExploitationLikelihoodValues() []core.TypeEnum {
	return []core.TypeEnum{
		Unlikely,
		Likely,
		VeryLikely,
		Frequent,
	}
}

func ParseRiskExploitationLikelihood(value string) (result RiskExploitationLikelihood, err error) {
	value = strings.TrimSpace(value)
	for _, candidate := range RiskExploitationLikelihoodValues() {
		if candidate.String() == value {
			return candidate.(RiskExploitationLikelihood), err
		}
	}
	return result, errors.New("Unable to parse into type: " + value)
}

func (what RiskExploitationLikelihood) String() string {
	// NOTE: maintain list also in schema.json for validation in IDEs
	return [...]string{"unlikely", "likely", "very-likely", "frequent"}[what]
}

func (what RiskExploitationLikelihood) Title() string {
	return [...]string{"Unlikely", "Likely", "Very Likely", "Frequent"}[what]
}

func (what RiskExploitationLikelihood) Weight() int {
	return [...]int{1, 2, 3, 4}[what]
}

func (what RiskExploitationLikelihood) MarshalJSON() ([]byte, error) {
	return json.Marshal(what.String())
}
func HighestExploitationLikelihood(risks []Risk) RiskExploitationLikelihood {
	result := Unlikely
	for _, risk := range risks {
		if risk.ExploitationLikelihood > result {
			result = risk.ExploitationLikelihood
		}
	}
	return result
}
